import os,sys
import string
import commands
from optparse import OptionParser
import glob
from bson import json_util, ObjectId
import json
import util


__version__="1.0"
__status__ = "Dev"




###############################
def main():


        usage = "\n%prog  [options]"
        parser = OptionParser(usage,version="%prog version___")
        parser.add_option("-o","--objid",action="store",dest="objid",help="Object ID")
        parser.add_option("-v","--objver",action="store",dest="objver",help="Object Version")


        (options,args) = parser.parse_args()
        for key in ([options.objid, options.objver]):
            if not (key):
                parser.print_help()
                sys.exit(0)


        config_obj = json.loads(open("conf/config.json", "r").read())
        path_obj  =  config_obj[config_obj["server"]]["pathinfo"]
        root_obj =  config_obj[config_obj["server"]]["rootinfo"]
        db_obj = config_obj[config_obj["server"]]["dbinfo"]
       
        out_json = {}
        dbh, error_obj = util.connect_to_mongodb(db_obj) #connect to mongodb
        if error_obj != {}:
            out_json = error_obj
        else: 
            try:
                #mongo_cl_bco = mongo_dbh[db_obj["collections"]["bco"]]
                mongo_cl_bco = dbh[db_obj["collections"]["metadata"]]
                mongo_cl_counters = dbh[db_obj["collections"]["counters"]]
                mongo_cl_users = dbh[db_obj["collections"]["users"]]
                
                obj_id = int(options.objid.replace("GLYDS", ""))
                obj_ver = options.objver

                query_obj = {"_id":obj_id}
                doc = mongo_cl_bco.find_one(query_obj)
                print "<pre>"
                if doc == None:
                    print "\n\n\tReadme file does not exist for object %s!" % (obj_id)
                else:
                    cmd = "cat " + path_obj["htmlpath"] + "/ln2wwwdata/reviewed/release-notes.txt"
                    current_ver = commands.getoutput(cmd).split(" ")[0].strip()
                    readme_file = path_obj["htmlpath"] + "/ln2wwwdata/reviewed/" + doc["readmefilename"]
                    if obj_ver != current_ver:
                        readme_file = path_obj["htmlpath"] + "/ln2wwwdata/reviewed/" + obj_ver + "/" + doc["readmefilename"]
                    if os.path.exists(readme_file):
                        with open(readme_file, "r") as FR:
                            for line in FR:
                                print line[:-1]
                    else:
                        print "\n\n\tReadme file does not exist for object %s!" % (obj_id)
                print "</pre>"
            except Exception, e:
                #out_json = {"taskstatus":0, "errormsg":"Exceptipn error!"}
                #out_json["errormsg"] =  traceback.format_exc().split("\n")[-2].split(":")[0]
                print "<pre>Exceptipn error</pre>"




        print "</pre>"

if __name__ == '__main__':
	main()

